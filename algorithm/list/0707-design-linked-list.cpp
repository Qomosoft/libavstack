//ËÆæËÆ°ÈìæË°®ÁöÑÂÆûÁé∞„ÄÇÊÇ®ÂèØ‰ª•ÈÄâÊã©‰ΩøÁî®ÂçïÈìæË°®ÊàñÂèåÈìæË°®„ÄÇÂçïÈìæË°®‰∏≠ÁöÑËäÇÁÇπÂ∫îËØ•ÂÖ∑Êúâ‰∏§‰∏™Â±ûÊÄßÔºöval Âíå next„ÄÇval ÊòØÂΩìÂâçËäÇÁÇπÁöÑÂÄºÔºånext ÊòØÊåáÂêë‰∏ã‰∏Ä‰∏™ËäÇÁÇπÁöÑÊåáÈíà
///ÂºïÁî®„ÄÇÂ¶ÇÊûúË¶Å‰ΩøÁî®ÂèåÂêëÈìæË°®ÔºåÂàôËøòÈúÄË¶Å‰∏Ä‰∏™Â±ûÊÄß prev ‰ª•ÊåáÁ§∫ÈìæË°®‰∏≠ÁöÑ‰∏ä‰∏Ä‰∏™ËäÇÁÇπ„ÄÇÂÅáËÆæÈìæË°®‰∏≠ÁöÑÊâÄÊúâËäÇÁÇπÈÉΩÊòØ 0-index ÁöÑ„ÄÇ
//
// Âú®ÈìæË°®Á±ª‰∏≠ÂÆûÁé∞Ëøô‰∫õÂäüËÉΩÔºö
//
//
// get(index)ÔºöËé∑ÂèñÈìæË°®‰∏≠Á¨¨ index ‰∏™ËäÇÁÇπÁöÑÂÄº„ÄÇÂ¶ÇÊûúÁ¥¢ÂºïÊó†ÊïàÔºåÂàôËøîÂõû-1„ÄÇ
// addAtHead(val)ÔºöÂú®ÈìæË°®ÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†‰πãÂâçÊ∑ªÂä†‰∏Ä‰∏™ÂÄº‰∏∫ val ÁöÑËäÇÁÇπ„ÄÇÊèíÂÖ•ÂêéÔºåÊñ∞ËäÇÁÇπÂ∞ÜÊàê‰∏∫ÈìæË°®ÁöÑÁ¨¨‰∏Ä‰∏™ËäÇÁÇπ„ÄÇ
// addAtTail(val)ÔºöÂ∞ÜÂÄº‰∏∫ val ÁöÑËäÇÁÇπËøΩÂä†Âà∞ÈìæË°®ÁöÑÊúÄÂêé‰∏Ä‰∏™ÂÖÉÁ¥†„ÄÇ
// addAtIndex(index,val)ÔºöÂú®ÈìæË°®‰∏≠ÁöÑÁ¨¨ index ‰∏™ËäÇÁÇπ‰πãÂâçÊ∑ªÂä†ÂÄº‰∏∫ val ÁöÑËäÇÁÇπ„ÄÇÂ¶ÇÊûú index Á≠â‰∫éÈìæË°®ÁöÑÈïøÂ∫¶ÔºåÂàôËØ•ËäÇÁÇπÂ∞ÜÈôÑÂä†
//Âà∞ÈìæË°®ÁöÑÊú´Â∞æ„ÄÇÂ¶ÇÊûú index Â§ß‰∫éÈìæË°®ÈïøÂ∫¶ÔºåÂàô‰∏ç‰ºöÊèíÂÖ•ËäÇÁÇπ„ÄÇÂ¶ÇÊûúindexÂ∞è‰∫é0ÔºåÂàôÂú®Â§¥ÈÉ®ÊèíÂÖ•ËäÇÁÇπ„ÄÇ
// deleteAtIndex(index)ÔºöÂ¶ÇÊûúÁ¥¢Âºï index ÊúâÊïàÔºåÂàôÂà†Èô§ÈìæË°®‰∏≠ÁöÑÁ¨¨ index ‰∏™ËäÇÁÇπ„ÄÇ
//
//
//
//
// Á§∫‰æãÔºö
//
//
//MyLinkedList linkedList = new MyLinkedList();
//linkedList.addAtHead(1);
//linkedList.addAtTail(3);
//linkedList.addAtIndex(1,2);   //ÈìæË°®Âèò‰∏∫1-> 2-> 3
//linkedList.get(1);            //ËøîÂõû2
//linkedList.deleteAtIndex(1);  //Áé∞Âú®ÈìæË°®ÊòØ1-> 3
//linkedList.get(1);            //ËøîÂõû3
//
//
//
//
// ÊèêÁ§∫Ôºö
//
//
// 0 <= index, val <= 1000
// ËØ∑‰∏çË¶Å‰ΩøÁî®ÂÜÖÁΩÆÁöÑ LinkedList Â∫ì„ÄÇ
// get, addAtHead, addAtTail, addAtIndex Âíå deleteAtIndex ÁöÑÊìç‰ΩúÊ¨°Êï∞‰∏çË∂ÖËøá 2000„ÄÇ
//
//
// Related Topics ËÆæËÆ° ÈìæË°® üëç 694 üëé 0

#include <iostream>
#include <memory>
#include <algorithm>
#include <string>

using namespace std;

struct ListNode {
    int val;
    ListNode *next;

    ListNode() : val(0), next(nullptr) {}
    ListNode(int x) : val(x), next(nullptr) {}
    ListNode(int x, ListNode *next) : val(x), next(nullptr) {}
};


class MyLinkedList {
public:
    MyLinkedList() : size_(0) {
        head_ = new ListNode();
    }

    MyLinkedList(const initializer_list<int> &elements) {
        head_ = new ListNode();
        ListNode *cur = head_;
        for (auto &element : elements) {
            cur->next = new ListNode(element);
            cur = cur->next;
            size_++;
        }
    }

    virtual ~MyLinkedList() {
        ListNode *cur = head_;
        while (cur) {
            ListNode *next = cur->next;
            delete cur;
            cur = next;
        }
        head_ = nullptr;
        size_ = 0;
    }

    int get(int index) {
        if (index < 0 || index >= size_) {
            return -1;
        }
        ListNode *cur = head_;
        for (int i = 0; i <= index; i++) {
            cur = cur->next;
        }
        return cur->val;
    }

    void addAtHead(int val) {
        addAtIndex(0, val);
    }

    void addAtTail(int val) {
        addAtIndex(size_, val);
    }

    void addAtIndex(int index, int val) {
        if (index > size_) {
            return;
        }
        index = max(0, index);
        size_++;
        ListNode *pre = head_;
        for (int i = 0; i < index; i++) {
            pre = pre->next;
        }
        ListNode *cur = new ListNode(val);
        cur->next = pre->next;
        pre->next = cur;
    }

    void deleteAtIndex(int index) {
        if (index < 0 || index >= size_) {
            return;
        }
        size_--;
        ListNode *pre = head_;
        for (int i = 0; i < index; i++) {
            pre = pre->next;
        }
        ListNode *cur = pre->next;
        pre->next = pre->next->next;
        delete cur;
    }
private:
    int size_;
    ListNode *head_;

public:
    friend ostream &operator<<(ostream &out, const MyLinkedList &list);
};

ostream &operator<<(ostream &out, const MyLinkedList &list) {
    out << '[';
    string comma = "";
    ListNode *cur = list.head_->next;
    while (cur) {
        out << comma << cur->val;
        comma = ",";
        cur = cur->next;
    }
    out << ']';
    return out;
}

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */

int main(int argc, const char *argv[])
{
//    MyLinkedList list = {1, 2, 3, 4, 5, 6, 7};
    MyLinkedList list;
    list.addAtHead(2);
    cout << list << endl;
    list.addAtHead(1);
    cout << list << endl;
    list.addAtTail(3);
    cout << list << endl;
    list.addAtIndex(3, 4);
    cout << list << endl;
    return 0;
}